general {

  # remote-execution-context-classname = "org.remotefutures.core.impl.local.LocalRunningRemoteExecutionContext"
  #remote-execution-context-FQCN = "org.remotefutures.core.impl.akka.pullingworker.PullingWorkerRemoteExecutionContext"

  node-controllers-FQCN = "org.remotefutures.core.impl.akka.pullingworker.controllers.PullingWorkerNodeControllers"

  future-timeout-in-ms = 5000

  #
  # Distribution strategy
  #
  # FIRST_WIN      means, the task is send to all nodes in a cluster
  #                but only the first reply will be accepted. This is ideal for
  #                low latency applications.
  #
  # LOAD_BALANCING means, the work load is evenly spread across
  #                all nodes available.
  #
  # FAIL_OVER      means, a task is send to one node and if an error or time-out
  #                happens, the same task will be re-send to another node
  #                so that eventually a result will be result.
  #
  distribution-strategy = "LOAD_BALANCING"
}

// specific settings for pulling worker
org.remotefutures.core.impl.akka.pullingworker.controllers.PullingWorkerNodeControllers {
  master {
    systemname = "Mastersystem"
    akka {
      loglevel = "DEBUG"

      actor.provider = "akka.cluster.ClusterActorRefProvider"

      //
      //  cluster {
      //    seed-nodes = [
      //      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      //      "akka.tcp://ClusterSystem@127.0.0.1:2552"]
      //
      //    auto-down-unreachable-after = 10s
      //  }

      // Remoting uses a random host port.
      // remote.netty.tcp.port=0
      remote.netty.tcp.hostname = 127.0.0.1
      remote.netty.tcp.port = 2551
      extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]
      log-dead-letters = 0
      log-dead-letters-during-shutdown = false
    }

    // http://blog.michaelhamrah.com/2014/03/running-an-akka-cluster-with-docker-containers/
  }

  worker {
    systemname = "Workersystem"
    akka {

      actor.provider = "akka.remote.RemoteActorRefProvider"

      remote.netty.tcp.port = 0
      remote.netty.tcp.hostname = 127.0.0.1

      log-dead-letters = 0
      log-dead-letters-during-shutdown = false

      # // Override the configuration of the port
      # val config = ConfigFactory.parseString("akka.remote.netty.tcp.port=" + port).
      # withFallback(ConfigFactory.load())

    }

    contact-points = [
      "akka.tcp://Mastersystem@127.0.0.1:2551"
      "akka.tcp://Mastersystem@127.0.0.1:2552"
    ]
  }
}
